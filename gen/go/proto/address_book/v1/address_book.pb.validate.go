// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/address_book/v1/address_book.proto

package address_bookv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FindByNameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByNameRequestMultiError, or nil if none found.
func (m *FindByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return FindByNameRequestMultiError(errors)
	}

	return nil
}

// FindByNameRequestMultiError is an error wrapping multiple validation errors
// returned by FindByNameRequest.ValidateAll() if the designated constraints
// aren't met.
type FindByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByNameRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByNameRequestMultiError) AllErrors() []error { return m }

// FindByNameRequestValidationError is the validation error returned by
// FindByNameRequest.Validate if the designated constraints aren't met.
type FindByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByNameRequestValidationError) ErrorName() string {
	return "FindByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByNameRequestValidationError{}

// Validate checks the field values on FindByNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByNameResponseMultiError, or nil if none found.
func (m *FindByNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByNameResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByNameResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByNameResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByNameResponseMultiError(errors)
	}

	return nil
}

// FindByNameResponseMultiError is an error wrapping multiple validation errors
// returned by FindByNameResponse.ValidateAll() if the designated constraints
// aren't met.
type FindByNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByNameResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByNameResponseMultiError) AllErrors() []error { return m }

// FindByNameResponseValidationError is the validation error returned by
// FindByNameResponse.Validate if the designated constraints aren't met.
type FindByNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByNameResponseValidationError) ErrorName() string {
	return "FindByNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindByNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByNameResponseValidationError{}

// Validate checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Profile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProfileMultiError, or nil if none found.
func (m *Profile) ValidateAll() error {
	return m.validate(true)
}

func (m *Profile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FullName

	for idx, item := range m.GetPhoneNumbers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProfileValidationError{
						field:  fmt.Sprintf("PhoneNumbers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProfileValidationError{
						field:  fmt.Sprintf("PhoneNumbers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileValidationError{
					field:  fmt.Sprintf("PhoneNumbers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetLastUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "LastUpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "LastUpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileValidationError{
				field:  "LastUpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if len(errors) > 0 {
		return ProfileMultiError(errors)
	}

	return nil
}

// ProfileMultiError is an error wrapping multiple validation errors returned
// by Profile.ValidateAll() if the designated constraints aren't met.
type ProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileMultiError) AllErrors() []error { return m }

// ProfileValidationError is the validation error returned by Profile.Validate
// if the designated constraints aren't met.
type ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileValidationError) ErrorName() string { return "ProfileValidationError" }

// Error satisfies the builtin error interface
func (e ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileValidationError{}

// Validate checks the field values on Profile_PhoneNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Profile_PhoneNumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Profile_PhoneNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Profile_PhoneNumberMultiError, or nil if none found.
func (m *Profile_PhoneNumber) ValidateAll() error {
	return m.validate(true)
}

func (m *Profile_PhoneNumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for PhoneType

	if len(errors) > 0 {
		return Profile_PhoneNumberMultiError(errors)
	}

	return nil
}

// Profile_PhoneNumberMultiError is an error wrapping multiple validation
// errors returned by Profile_PhoneNumber.ValidateAll() if the designated
// constraints aren't met.
type Profile_PhoneNumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Profile_PhoneNumberMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Profile_PhoneNumberMultiError) AllErrors() []error { return m }

// Profile_PhoneNumberValidationError is the validation error returned by
// Profile_PhoneNumber.Validate if the designated constraints aren't met.
type Profile_PhoneNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Profile_PhoneNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Profile_PhoneNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Profile_PhoneNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Profile_PhoneNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Profile_PhoneNumberValidationError) ErrorName() string {
	return "Profile_PhoneNumberValidationError"
}

// Error satisfies the builtin error interface
func (e Profile_PhoneNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfile_PhoneNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Profile_PhoneNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Profile_PhoneNumberValidationError{}
