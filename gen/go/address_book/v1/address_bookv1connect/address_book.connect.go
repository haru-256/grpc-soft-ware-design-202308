// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: address_book/v1/address_book.proto

package address_bookv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/haru-256/grpc-soft-ware-design-202307/gen/go/address_book/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AddressBookServiceName is the fully-qualified name of the AddressBookService service.
	AddressBookServiceName = "address_book.v1.AddressBookService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AddressBookServiceFindByNameProcedure is the fully-qualified name of the AddressBookService's
	// FindByName RPC.
	AddressBookServiceFindByNameProcedure = "/address_book.v1.AddressBookService/FindByName"
)

// AddressBookServiceClient is a client for the address_book.v1.AddressBookService service.
type AddressBookServiceClient interface {
	// 電話帳から電話番号を検索する
	//
	// [Error]
	// - NotFound: 指定された名前のプロフィールが存在しない場合
	FindByName(context.Context, *connect.Request[v1.FindByNameRequest]) (*connect.Response[v1.FindByNameResponse], error)
}

// NewAddressBookServiceClient constructs a client for the address_book.v1.AddressBookService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAddressBookServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AddressBookServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	addressBookServiceMethods := v1.File_address_book_v1_address_book_proto.Services().ByName("AddressBookService").Methods()
	return &addressBookServiceClient{
		findByName: connect.NewClient[v1.FindByNameRequest, v1.FindByNameResponse](
			httpClient,
			baseURL+AddressBookServiceFindByNameProcedure,
			connect.WithSchema(addressBookServiceMethods.ByName("FindByName")),
			connect.WithClientOptions(opts...),
		),
	}
}

// addressBookServiceClient implements AddressBookServiceClient.
type addressBookServiceClient struct {
	findByName *connect.Client[v1.FindByNameRequest, v1.FindByNameResponse]
}

// FindByName calls address_book.v1.AddressBookService.FindByName.
func (c *addressBookServiceClient) FindByName(ctx context.Context, req *connect.Request[v1.FindByNameRequest]) (*connect.Response[v1.FindByNameResponse], error) {
	return c.findByName.CallUnary(ctx, req)
}

// AddressBookServiceHandler is an implementation of the address_book.v1.AddressBookService service.
type AddressBookServiceHandler interface {
	// 電話帳から電話番号を検索する
	//
	// [Error]
	// - NotFound: 指定された名前のプロフィールが存在しない場合
	FindByName(context.Context, *connect.Request[v1.FindByNameRequest]) (*connect.Response[v1.FindByNameResponse], error)
}

// NewAddressBookServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAddressBookServiceHandler(svc AddressBookServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	addressBookServiceMethods := v1.File_address_book_v1_address_book_proto.Services().ByName("AddressBookService").Methods()
	addressBookServiceFindByNameHandler := connect.NewUnaryHandler(
		AddressBookServiceFindByNameProcedure,
		svc.FindByName,
		connect.WithSchema(addressBookServiceMethods.ByName("FindByName")),
		connect.WithHandlerOptions(opts...),
	)
	return "/address_book.v1.AddressBookService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AddressBookServiceFindByNameProcedure:
			addressBookServiceFindByNameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAddressBookServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAddressBookServiceHandler struct{}

func (UnimplementedAddressBookServiceHandler) FindByName(context.Context, *connect.Request[v1.FindByNameRequest]) (*connect.Response[v1.FindByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("address_book.v1.AddressBookService.FindByName is not implemented"))
}
